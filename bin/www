// runtime validator
const runtime = require('../validator/runtimeValidator');
(async () => {
  await runtime.validateEnvFile()
})();

// dependency
const debug = require('debug')('human-task:server');
const http = require('http');
const CONFIG = require('../config/config')
const port = normalizePort(CONFIG.APP_PORT);

// app setup
const app = require('../app');
app.set('port', port);

// server setup
const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// validate port
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return false;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

// server error
function onError(error) {

  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }

}

// http server listener 
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Running at port: ', port)
}
